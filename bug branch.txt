软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，
所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

1.当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，
但是，等等，当前正在dev上进行的工作还没有提交.

    并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。
但是，必须在两个小时内修复该bug，怎么办？

现场存储

幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
$ git stash

现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。


首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：


解决bug

太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了




Stash 恢复

工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看

工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了：